name: Format and Clean Issue Links

on:
  issues:
    types: [opened]

jobs:
  process-links:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Format and clean issue body
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          issue_number=${{ github.event.issue.number }}
          issue_body=$(jq -r '.issue.body' <<< "${{ toJson(github.event) }}")
          
          # Extract Slack link
          slack=$(echo "$issue_body" | grep 'ðŸŽ¯ Slack Link:' | sed 's/.*ðŸŽ¯ Slack Link: //')

          # Extract Figma link
          figma=$(echo "$issue_body" | grep 'ðŸŽ¨ Figma Link:' | sed 's/.*ðŸŽ¨ Figma Link: //')

          # Extract Other link
          other=$(echo "$issue_body" | grep 'ðŸ”— Other Reference Links:' | sed 's/.*ðŸ”— Other Reference Links: //')

          # Properly quote the strings to handle special characters
          slack="${slack//\"/\\\"}"
          figma="${figma//\"/\\\"}"
          other="${other//\"/\\\"}"

          # Initialize new body with the original content
          new_body=$(echo "$issue_body" | sed -e "/ðŸŽ¯ Slack Link:.*/d" \
                                             -e "/ðŸŽ¨ Figma Link:.*/d" \
                                             -e "/ðŸ”— Other Reference Links:.*/d")

          # Append links if they are non-empty
          if [[ -n "$slack" ]]; then
            new_body="$new_body\nðŸŽ¯ Slack Link: $slack"
          fi
          if [[ -n "$figma" ]]; then
            new_body="$new_body\nðŸŽ¨ Figma Link: $figma"
          fi
          if [[ -n "$other" ]]; then
            new_body="$new_body\nðŸ”— Other Reference Links: $other"
          fi

          # Debugging output for validation
          echo "New issue body:"
          echo "$new_body"

          # Update the issue with the new body
          gh api repos/${{ github.repository }}/issues/${issue_number} --method PATCH --field body="$new_body"
